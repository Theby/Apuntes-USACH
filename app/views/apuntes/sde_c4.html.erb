		<section id="title">
			<div class="container">
				<div class="row">
					<div class="col-md-6">
						<h1><%= t('ramos.sde') %></h1>
						<p><%= t('profe.sde') %></p>
					</div>
					<div class="col-md-6">
						<p class="pull-right">Fecha: 25-09-2014</p>
					</div>
				</div>
			</div>
		</section>

		<section id="body">
			<div class="container">
				<h2>Clase 4 - Scalable Storage Systems</h2>

				<p>En sistemas de almacenamiento en los que se maneja muchos discos de información es necesario tener sistemas de tolerancia a fallas. <br>
					Para poder hacer esto hay que invertir en grandes costos de rebundancia. Demodo que son las operaciones de Input y Output las que se escalan.</p>

				<h3>BD Relacionales</h3>

				<p>
					Son de fácil Setup, tienen una gran cantidad de usuarios.<br><br>

					Las replicas suelen estar en un estado de Master -> Slave.<br>
					También es posible fraccionar y replicar una tabla de la base de datos.<br><br>

					Usualmente se eligen dos elementos del CAP Theorem: Consistency, Availability and Partition.
				</p>

				<h3>Bigtable: SD</h3>

				<p>
					Útil para datos estructurados. No consiste en una BD completamente relacional. Es fácil acceder a los datos. <br>
					Hay un rango de filas dinámicamente particionadas.
				</p>

				<h3>OceanStore</h3>

				<p>
					Busca ser persistente en una estructura no confiable.

					Herramientas:
					<ul>
						<li>Rebundancia</li>
						<li>Cryptographic</li>
						<li>Caching</li>
						<li>Monitoring</li>
					</ul>
				</p>

				<h4>Naming & Access Control</h4>

				<p>Cada objeto con un GUID(Global Unique ID) fijo. La búsqueda es basada en pre-fijos. La actualización de datos es mediante acuerdos.</p>

				<h3>Amazon Dynamo</h3>

				<p>Es confiable y a gran escala. Es eficiente, consiste de muchos datacenters. Usa sistemas simples de Query.

					Solo se usa un:
					<ul>
						<li>Get(key)</li>
						<li>Put(key, context, object)</li>
					</ul>

					Tiene un has consistente, esto permite replicar el nodo que recibe la query.
				</p>

				<h4>Data versioning</h4>

				<p>
					La modificación de un archivo puede ser mediante branch y merge, las versiones antiguas no se elimiman. <br>
					Cuando existen fallas se llega a un acuerdo.
				</p>

				<h4>Membership</h4>

				<p>Mediante el traspaso de mensajes a ciertos nodos.</p>
			</div>
		</section>

		<section id="footer">
			<div class="container navbar-fixed-bottom">
				<div class="panel panel-success">
					<div class="panel-footer">
						<div class="row">
							<div class="col-md-3">
								<%= link_to apuntes_sde_sde_c3_path, :class => "pull-left" do %>
									<span class="glyphicon glyphicon-arrow-left"></span> Clase 3 - Mobile Computing y P2P
								<% end %>
							</div>
							<div class="col-md-3">
								<%= link_to t('ramo.sde'), apuntes_sde_path, :class => "pull-right" %>
							</div>
							<div class="col-md-3">
								<a class="pull-left" href="#top"> Volver Arriba <span class="glyphicon glyphicon-arrow-up"></span></a>
							</div>
							<div class="col-md-3">
								<!--
								<%= link_to CLASE_SIGUIENTE_PATH, :class => "pull-right" do %>
									Clase X <span class="glyphicon glyphicon-arrow-right"></span>
								<% end %>
								-->
							</div>
						</div>
					</div>
					<div class="panel-heading">
						<h3 class="panel-title" align="center"> Desarrollado por Esteban Gaete Flores </h3>
					</div>
				</div>
			</div>
		</section>